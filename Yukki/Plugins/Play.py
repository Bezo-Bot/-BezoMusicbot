import asyncio
from os import path

from pyrogram import filters
from pyrogram.types import (InlineKeyboardMarkup, InputMediaPhoto, Message,
                            Voice)
from youtube_search import YoutubeSearch

import Yukki
from Yukki import (BOT_USERNAME, DURATION_LIMIT, DURATION_LIMIT_MIN,
                   MUSIC_BOT_NAME, app, db_mem)
from Yukki.Core.PyTgCalls.Converter import convert
from Yukki.Core.PyTgCalls.Downloader import download
from Yukki.Core.PyTgCalls.Tgdownloader import telegram_download
from Yukki.Database import (get_active_video_chats, get_video_limit,
                            is_active_video_chat)
from Yukki.Decorators.assistant import AssistantAdd
from Yukki.Decorators.checker import checker
from Yukki.Decorators.logger import logging
from Yukki.Decorators.permission import PermissionCheck
from Yukki.Inline import (livestream_markup, playlist_markup, search_markup,
                          search_markup2, url_markup, url_markup2)
from Yukki.Utilities.changers import seconds_to_min, time_to_seconds
from Yukki.Utilities.chat import specialfont_to_normal
from Yukki.Utilities.stream import start_stream, start_stream_audio
from Yukki.Utilities.theme import check_theme
from Yukki.Utilities.thumbnails import gen_thumb
from Yukki.Utilities.url import get_url
from Yukki.Utilities.videostream import start_stream_video
from Yukki.Utilities.youtube import (get_yt_info_id, get_yt_info_query,
                                     get_yt_info_query_slider)

loop = asyncio.get_event_loop()

@app.on_message(
    commandpro(["/p", "Play", "/play", "/play@{BOT_USERNAME}"]) & filters.group
)
@checker
@logging
@AssistantAdd
async def mplayaa(_, message: Message):    
    await message.delete()
    if message.chat.id not in db_mem:
        db_mem[message.chat.id] = {}
    
    audio = (
        (message.reply_to_message.audio or message.reply_to_message.voice)
        if message.reply_to_message
        else None
    )
    video = (
        (message.reply_to_message.video or message.reply_to_message.document)
        if message.reply_to_message
        else None
    )
    url = get_url(message)
    if audio:
        mystic = await message.reply_text(
            "üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è...."
        )
        try:
            read = db_mem[message.chat.id]["live_check"]
            if read:
                return await mystic.edit(
                    "Live Streaming Playing...Stop it to play music"
                )
            else:
                pass
        except:
            pass
        if audio.file_size > 1073741824:
            return await mystic.edit_text(
                "·¥Ä·¥ú·¥Ö…™·¥è “ì…™ ü·¥á s…™·¥¢·¥á s ú·¥è·¥ú ü·¥Ö  ô·¥á  ü·¥áss ·¥õ ú·¥Ä…¥ ùü∑ùüªùü∂ ·¥ç ô"
            )
        duration_min = seconds_to_min(audio.duration)
        duration_sec = audio.duration
        if (audio.duration) > DURATION_LIMIT:
            return await mystic.edit_text(
                f"**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥  ü…™·¥ç…™·¥õ ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö**\n\n**·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥: **{DURATION_LIMIT_MIN} ·¥ç…™…¥·¥ú·¥õ·¥ás\n** Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:** {duration_min} minute(s)"
            )
        file_name = (
            audio.file_unique_id
            + "."
            + (
                (audio.file_name.split(".")[-1])
                if (not isinstance(audio, Voice))
                else "ogg"
            )
        )
        file_name = path.join(path.realpath("downloads"), file_name)
        file = await convert(
            (await message.reply_to_message.download(file_name))
            if (not path.isfile(file_name))
            else file_name,
        )
        return await start_stream_audio(
            message,
            file,
            "smex1",
            "Given Audio Via Telegram",
            duration_min,
            duration_sec,
            mystic,
        )
    elif video:
        return await message.reply_text("·¥ús·¥á `/play` ·¥è Ä `/vplay` ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥ò ü·¥Ä è ·¥Ä·¥ú·¥Ö…™·¥è ·¥è Ä ·¥†…™·¥Ö·¥á·¥è …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ...")
    elif url:
        mystic = await message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥ú Ä ü....")
        if not message.reply_to_message:
            query = message.text.split(None, 1)[1]
        else:
            query = message.reply_to_message.text
        (
            title,
            duration_min,
            duration_sec,
            thumb,
            videoid,
        ) = get_yt_info_query(query)
        await mystic.delete()        
        MusicData = f"MusicStream {videoid}|{duration_min}|{message.from_user.id}"
        return await mplay_stream(message,MusicData)
    else:
        if len(message.command) < 2:
            buttons = playlist_markup(
                message.from_user.first_name, message.from_user.id, "abcd"
            )
            await message.reply_photo(
                photo="Utils/Playlist.jpg",
                caption=(
                    "**·¥ús·¥Ä…¢·¥á:** `/play` [·¥ç·¥ús…™·¥Ñ …¥·¥Ä·¥ç·¥á ·¥è Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ã ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è “ì…™ ü·¥á]\n\n…™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ò ü·¥Ä è ü…™s·¥õs s·¥á ü·¥á·¥Ñ·¥õ ·¥õ ú·¥á ·¥è…¥·¥á “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥°..."
                ),
                reply_markup=InlineKeyboardMarkup(buttons),
            )
            return
        mystic = await message.reply_text("**s·¥á·¥Ä Ä·¥Ñ ú…™…¥…¢...**")
        query = message.text.split(None, 1)[1]
        (
            title,
            duration_min,
            duration_sec,
            thumb,
            videoid,
        ) = get_yt_info_query(query)
        await mystic.delete()
        MusicData = f"MusicStream {videoid}|{duration_min}|{message.from_user.id}"
        return await mplay_stream(message,MusicData)


@app.on_message(
    commandpro(["/v", "/vplay", "vplay", "/vplay@{BOT_USERNAME}"]) & filters.group
)
@checker
@logging
@AssistantAdd
async def vplayaaa(_, message: Message):
    await message.delete()
    if message.chat.id not in db_mem:
        db_mem[message.chat.id] = {}
    if message.sender_chat:
        return await message.reply_text(
            " è·¥è·¥ú' Ä·¥á ·¥Ä…¥ __·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥__ …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò...\n Ä·¥á·¥†·¥á Ä·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs..."
        )
    audio = (
        (message.reply_to_message.audio or message.reply_to_message.voice)
        if message.reply_to_message
        else None
    )
    video = (
        (message.reply_to_message.video or message.reply_to_message.document)
        if message.reply_to_message
        else None
    )
    url = get_url(message)
    if audio:
        return await message.reply_text("·¥ús·¥á `/play` ·¥è Ä `/vplay` ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥ò ü·¥Ä è ·¥Ä·¥ú·¥Ö…™·¥è ·¥è Ä ·¥†…™·¥Ö·¥á·¥è …™…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ...")
    elif video:
        limit = await get_video_limit(141414)
        if not limit:
            return await message.reply_text(
                "**…¥·¥è  ü…™·¥ç…™·¥õ ·¥Ö·¥á“ì…™…¥·¥á·¥Ö “ì·¥è Ä ·¥†…™·¥Ö·¥á·¥è ·¥Ñ·¥Ä ü üs**\n\ns·¥á·¥õ ·¥Ä  ü…™·¥ç…™·¥õ “ì·¥è Ä …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥ç·¥Äx…™·¥ç·¥ú·¥ç ·¥†…™·¥Ö·¥á·¥è ·¥Ñ·¥Ä ü üs ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥è…¥  ô·¥è·¥õ  ô è `/set_video_limit` [s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥è…¥ ü è]"
            )
        count = len(await get_active_video_chats())
        if int(count) == int(limit):
            if await is_active_video_chat(message.chat.id):
                pass
            else:
                return await message.reply_text(
                    "s·¥è Ä Ä è  ô·¥è·¥õ ·¥è…¥ ü è ·¥Ä ü ü·¥è·¥°s  ü…™·¥ç…™·¥õ·¥á·¥Ö …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥†…™·¥Ö·¥á·¥è ·¥Ñ·¥Ä ü üs ·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥ò·¥ú ·¥è·¥†·¥á Ä ü·¥è·¥Ä·¥Ö …™ss·¥ú·¥ás. ·¥ç·¥Ä…¥ è ·¥è·¥õ ú·¥á Ä ·¥Ñ ú·¥Ä·¥õs ·¥Ä Ä·¥á ·¥ús…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è ·¥Ñ·¥Ä ü ü  Ä…™…¢ ú·¥õ …¥·¥è·¥°. ·¥õ Ä è s·¥°…™·¥õ·¥Ñ ú…™…¥…¢ ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è ·¥è Ä ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä..."
                )
        mystic = await message.reply_text(
            "üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è..."
        )
        try:
            read = db_mem[message.chat.id]["live_check"]
            if read:
                return await mystic.edit(
                    " ü…™·¥†·¥ás s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢.../ns·¥õ·¥è·¥ò …™·¥õ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ..."
                )
            else:
                pass
        except:
            pass
        file = await telegram_download(message, mystic)
        return await start_stream_video(
            message,
            file,
            "Given Video Via Telegram",
            mystic,
        )
    elif url:
        mystic = await message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥ú Ä ü...")
        if not message.reply_to_message:
            query = message.text.split(None, 1)[1]
        else:
            query = message.reply_to_message.text
        (
            title,
            duration_min,
            duration_sec,
            thumb,
            videoid,
        ) = get_yt_info_query(query)               
        
        VideoData = f"·¥Ñ ú·¥è·¥ès·¥á {videoid}|{duration_min}|{message.from_user.id}"
        return await vplay_stream(message,VideoData,mystic)
    else:        
        if len(message.command) < 2:
            buttons = playlist_markup(
                message.from_user.first_name, message.from_user.id, "abcd"
            )
            await message.reply_photo(
                photo="Utils/Playlist.jpg",
                caption=(
                    "**·¥ús·¥Ä…¢·¥á:** `/vplay` [·¥ç·¥ús…™·¥Ñ …¥·¥Ä·¥ç·¥á ·¥è Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ã ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è]\n\n…™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ò ü·¥Ä è ü…™s·¥õs s·¥á ü·¥á·¥Ñ·¥õ ·¥õ ú·¥á ·¥è…¥·¥á “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥°..."
                ),
                reply_markup=InlineKeyboardMarkup(buttons),
            )
            return
        mystic = await message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...")
        query = message.text.split(None, 1)[1]
        (
            title,
            duration_min,
            duration_sec,
            thumb,
            videoid,
        ) = get_yt_info_query(query)       
        VideoData = f"·¥Ñ ú·¥è·¥ès·¥á {videoid}|{duration_min}|{message.from_user.id}"
        return await vplay_stream(message,VideoData,mystic)
